<?php
BDD Eloquent basics name convention
---------------------------------------------------------------------
Curso Laravel. BBDD VI. Eloquent I. Vídeo 21
https://www.youtube.com/watch?v=LHJjFZsd5Iw&list=PLU8oAlHdN5Bk-qkvjER90g2c_jVmpAHBh&index=21

Name convention, el modelo debe llamarse al igual que la tabla pero en singular,
por ejemplo: 
	tabla: articulos
	modelo: Articulo

Create the model 
	$ php artisan make:model <ModelNamme>
	Example:
	$ php artisan make:model Customer	  

    -c #create controller class 
    -m or --migration #create migration file

	$ php artisan make:model Customer -c -m
	$ php artisan make:model Customer -c -m


Dentro de un controller:   
use App\Product;

	public function show(Request $request)
    {
        
        $products = Product::all();
        foreach ($products as $product) {
        	echo "Name: " . $product->name . " Price: " . $product->name . "<br>" ;
        }

        return view('products.index',compact('products',$products));
    }


Configuraciones adicionales si no se desea seguir la convencion de nombres:

a) Si necesitamos cambiar el nombre de la tabla dentro del codigo
es necesario definir la variable protected dentro del modelo: 

	use Illuminate\Database\Eloquent\Model;

	class Product extends Model
	{
	    protected $table = "MyArticles";
	}
Sinembargo es recomendable seguir la convencion de nombres.


b) Si nuestro campo id por defecto, por otro nombre ejemplo: article_id
hay que crear otra variable:
	use Illuminate\Database\Eloquent\Model;

	class Product extends Model
	{
	    protected $primaryKey = "article_id";
	}



Como hacer las consultas con filtros:

Se usa el metodo where, sintaxis:
	$products = Product::where('field','value');

	a) $products = Product::where("pais","China");
	b) $products = Product::where("seccion","Ceramica");
	c) $products = Product::where("seccion","Ceramica")->take(1)->get(); #LIMIT 1
	d) $products = Product::where("seccion","Ceramica")->orderBy("nombre", "desc")->get(); #ORDER BY
	e) $products = Product::where("seccion","Ceramica")->max("precio"); #MAX 
	return $products;

---------------------------------------------------------------------

Curso Laravel. BBDD VIII. Eloquent III. Vídeo 23
https://www.youtube.com/watch?v=8hD_C5BMra0&list=PLU8oAlHdN5Bk-qkvjER90g2c_jVmpAHBh&index=23

https://laravel.com/docs/6.x/eloquent#inserting-and-updating-models

Proceso para insertar un registro con Eloquent:
	$articulo = new Articulo();
	$articulo->nombre_articulo = "Pantalones";
	$articulo->precio = 60;
	$articulo->pais = "El Salvador";
	$articulo->observaciones = "Lavados en piedra";
	$articulo->seccion = "Confeccion";
	$articulo->save();

Proceso para actualizar un registro con Eloquent:
	$articulo = Articulo::find(7); #Busqueda por id
	$articulo->precio = 85;
	$articulo->save();

---------------------------------------------------------------------
Curso Laravel. BBDD IX. Eloquent IV. Vídeo 24
https://www.youtube.com/watch?v=N8_FAnCQ5Cs&list=PLU8oAlHdN5Bk-qkvjER90g2c_jVmpAHBh&index=24

Proceso para actualizar varios registros a la vez, en funcion de un criterio:
	# Usar la clase del modelo, con el metodo estatico where
	Model::where("field","Current value")->update(["field"=>"New value"]);
	Articulo::where("seccion","Abarrotes")->update(["seccion"=>"Cereales"]);

Proceso para actualizar varios registros a la vez, en funcion de varios criterios:
	Articulo::where("seccion","Cereales")->where("pais","El Salvador")->update(["precio"=>5.99]);


Proceso para borrar un registro en funcion de su id:
	$articulo = Articulo::find(7); # Busqueda por id
	$articulo->delete();

Proceso para borrar un registros en funcion de otros criterios:
	Articulo::where("seccion", "Cereales")->delete(); # Busqueda por seccion u otro criterio
	
Proceso para borrar registros en funcion de dos o mas criterios:
	Articulo::where("seccion", "Cereales")->where("precio", 5.99)->delete();

Como insertar varios registros de forma simultanea:
	Se debe indicar cuales son los campos que se puedan actualizar 
	Articulo::create(["articulo"=>"Impresora", "precio"=>50, "pais"=>"El Salvador", "observaciones"=>"nada que decir", "seccion"=>"Informatica"]);
	#Esto indicara una Excepsion mass asigment exception
	parfa desabilitarlo hay que agregar dentro del modelo:

	class Articulo extends Model
	{
	    /**
	     * The attributes that are mass assignable.
	     *
	     * @var array
	     */
	    protected $fillable = [
	        'articulo', 'precio', 'pais', 'observaciones', 'seccion'
	    ];
    }

---------------------------------------------------------------------
Curso Laravel. BBDD X Eloquent V. Vídeo 25
https://www.youtube.com/watch?v=Cn5fUt7l4mk&list=PLU8oAlHdN5Bk-qkvjER90g2c_jVmpAHBh&index=25

Soft delete (enviar a la papelera)
https://laravel.com/docs/6.x/eloquent#deleting-models

Hay que agregar el campo deleted_at;

	namespace App;
	use Illuminate\Database\Eloquent\Model;
	use Illuminate\Database\Eloquent\SoftDeletes;

	class Post extends Model
	{
	    use SoftDeletes;
	    protected $dates = ['deleted_at']; #only in Laravel 5.5
	}

