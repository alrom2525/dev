<?php
---------------------------------------------------------------------
Curso Laravel. BBDD XI. Eloquent VI. Vídeo 26
https://www.youtube.com/watch?v=DkxHCVGkpwE&list=PLU8oAlHdN5Bk-qkvjER90g2c_jVmpAHBh&index=26

https://laravel.com/docs/6.x/eloquent-relationships

Cómo crear la RELACION UNO a UNO entre dos tablas con eloquent.

Suposicion: Cada cliente compra un unico articulo.
	Tabla articulos: id, cliente_id(clave foranea), nombre_articulo, precio, observaciones, seccion.
	
	Tabla clientes: id, nombres, appelidos.

Ir al modelo y crear la funcion articulo():

namespace App;

use Illuminate\Database\Eloquent\Model;

class Cliente extends Model
{
    /**
     * Get the phone record associated with the user.
     */
    public function articulo()
    {
        return $this->hasOne('App\Articulo');
    }
}

En una ruta hacer la prueba:
use App\Articulo;
use App\Cliente;

Route::get('/cliente/{$id}/articulo', function($id) {
	return Cliente::find($id)->articulo;
});

For example, a User model might bàe associated with one Phone.
Ir al modelo y crear la funcion:
namespace App;

use Illuminate\Database\Eloquent\Model;

class User extends Model
{
    /**
     * Get the phone record associated with the user.
     */
    public function phone()
    {
        return $this->hasOne('App\Phone');
    }
}

---------------------------------------------------------------------
Curso Laravel. BBDD XII Eloquent VII. Vídeo 27
https://www.youtube.com/watch?v=reUaUQKP0bA&list=PLU8oAlHdN5Bk-qkvjER90g2c_jVmpAHBh&index=27

https://laravel.com/docs/6.x/eloquent-relationships#one-to-many-inverse

Que es una RELACION INVERSA y como crear este tipo de relaciones.
No es ni más ni menos que invertir el sentido de la relación entre dos tablas. 

Se cambia el sentido 
Por cada cliente solo puede haber un articulo.

namespace App;

use Illuminate\Database\Eloquent\Model;

class Articulo extends Model
{
    /**
     * The users that belong to the role.
     */
    public function cliente()
    {
        return $this->belongsTo('App\Cliente');
    }
}



En una ruta hacer la prueba:
use App\Articulo;
use App\Cliente;

Route::get('/articulo/{$id}/cliente', function($id) {
	// return Articulo::find($id)->cliente; # obtiene todos los campos del cliente
	return Articulo::find($id)->cliente->Nombre; #obtiene solo el cmapo nombre del cliente
});


Defining The Inverse Of The Relationship
So, we can access the Phone model from our User. Now, lets define a relationship on the Phone model that will let us access the User that owns the phone. We can define the inverse of a hasOne relationship using the belongsTo method:


namespace App;

use Illuminate\Database\Eloquent\Model;

class Phone extends Model
{
    /**
     * Get the user that owns the phone.
     */
    public function user()
    {
        return $this->belongsTo('App\User');
    }
}


---------------------------------------------------------------------
Curso Laravel. BBDD XIII. Eloquent VIII. Vídeo 28
https://www.youtube.com/watch?v=w02iIRjyZ28&list=PLU8oAlHdN5Bk-qkvjER90g2c_jVmpAHBh&index=28

https://laravel.com/docs/6.x/eloquent-relationships#one-to-many
Como crear la RELACION UNO a VARIOS
Como crear la RELACION UNO a MUCHOS

Suposicion: Cada cliente compra varios articulos.
    Tabla articulos: id, cliente_id(clave foranea), nombre_articulo, precio, observaciones, seccion.
    
    Tabla clientes: id, nombres, appelidos.

Ir al modelo y crear la funcion articulo():

<?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Cliente extends Model
{
    /**
     * Get the comments for the blog post.
     */
    public function articulos()
    {
        return $this->hasMany('App\Articulo');
    }
}


Suponiendo que el cliente (id=3) ha comprado varios articulos,
se usa el siguiente codigo para obtener los registros de esas tablas relacionadas:
1)
use App\Articulo;
use App\Cliente;

Route::get('/articulos/', function() {
 
    $articulos = Cliente::find(3)->articulos;

    foreach ($articulos as $articulo) {
        echo $articulo->nombre_articulo . '<br>';
    }

});


2) Usando la clausula where

use App\Articulo; #estas instrucciones deben estar al exterior de todas las rutas
use App\Cliente;

Route::get('/articulos/', function() {
 
    // $articulos = Cliente::find(3)->articulos->where('pais_origen', 'Suiza')->first();
    $articulos = Cliente::find(3)->articulos->where('pais_origen', 'Suiza');
    $comment = App\Post::find(1)->comments()->where('title', 'foo')->first();
    foreach ($articulos as $articulo) {
        echo $articulo->nombre_articulo . '<br>';
    }

});


ejemplo 3: previamente se configuro la relacion inversa en el modelo Review
    a) Un estudiante puede hacer muchas revisiones de test 
    b) Una revision de test le pertene a un solo estudiante 

Modelo Student:
class Student extends Model
{
    public function reviews() 
    {
        return $this->hasMany('App\Review');
    }
}

Modelo Review:
class Review extends Model
{
    /**
     * Get the student that owns the review
     */
    public function student()
    {
        return $this->belongsTo('App\Student');
    }
}

Creacion de ruta para observar el funcionamiento

        Route::get('/review-tmp/', function() {
         
            $reviews = Student::find(1)->reviews;
            

            foreach ($reviews as $review) {
                echo $review->workphone . '<br>';
                echo $review->email . '<br>';
                
                $review_student = Review::find($review->student_id)->student;
                echo $review_student->firstname . '<br>';
                echo $review_student->lastname . '<br>';
                echo $review_student->street . '<br>';

                echo Review::find($review->student_id)->student->firstname . '<br>'; #obtiene solo el campo firstname
                echo Review::find($review->student_id)->student->lastname . '<br>'; # obtiene solo el campo lastname 
 
             }


For example, a blog post may have an infinite number of comments. Like all other Eloquent relationships, one-to-many relationships are defined by placing a function on your Eloquent model:

<?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Post extends Model
{
    /**
     * Get the comments for the blog post.
     */
    public function comments()
    {
        return $this->hasMany('App\Comment');
    }
}

